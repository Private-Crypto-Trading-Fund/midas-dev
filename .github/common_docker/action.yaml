name: "common_docker_build_action"

# # Usage:
# name: "Publish to docker registry"
# on:
#   push:
#     tags:
#       - "v*"
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: Private-Crypto-Trading-Fund/midas-dev/.github/common_docker@master
#         env:
#           DOCKERHUB_ORG_NAME: "${{ secrets.DOCKERHUB_ORG_NAME }}"
#           DOCKERHUB_TOKEN: "${{ secrets.DOCKERHUB_TOKEN }}"

inputs:
  DO_CHECKOUT:
    type: boolean
    default: true
  EXPECTED_BRANCH:
    type: string
    default: "master"

  PYTHON_VERSION:
    type: string
    default: "3.10"
  POETRY_VERSION:
    type: string
    default: "1.2.1"
  POETRY_URL:
    type: string
    default: "https://install.python-poetry.org"

runs:
  using: "composite"
  steps:

  # Side sad boolean input note: https://github.com/actions/runner/issues/1483
  - if: "inputs.DO_CHECKOUT == 'true'"
    uses: actions/checkout@v3

  # https://stackoverflow.com/a/59894223
  - name: "Fail if not on expected branch"
    if: "inputs.DO_CHECKOUT == 'true' && inputs.EXPECTED_BRANCH != ''"
    shell: bash
    env:
      BASE_REF: "${{ github.event.base_ref }}"
      EXPECTED_BRANCH: "${{ inputs.EXPECTED_BRANCH }}"
    run: |
      # `EXPECTED_BRANCH` check
      set -Eeuo pipefail
      set -x

      expected_ref="refs/heads/${EXPECTED_BRANCH}"
      current_commit="$(git rev-parse HEAD)"
      branches="$(git branch --contains="$current_commit" --format="%(refname)")"
      if ! printf "%s" "$branches" | grep -q "^${expected_ref}\$"; then
          echo "current_commit='${current_commit}' not in expected_ref='${expected_ref}' (branches=${branches})" >&2
          exit 254
      fi
  - name: "Fail if not on a version tag"
    shell: bash
    run: |
      # Version tag check
      set -Eeuo pipefail
      set -x
      CURRENT_TAG="$(git describe --exact-match --tags HEAD)"  # fails if HEAD has no tag
      if [[ ! "$CURRENT_TAG" =~ ^v.* ]]; then
          echo "Unexpected CURRENT_TAG=${CURRENT_TAG}" >&2
          exit 1
      fi

  # ### Metadata (from poetry) ###
  - name: "Set up Python ${{ inputs.PYTHON_VERSION }}"
    id: setup-python
    uses: actions/setup-python@v4
    with:
      python-version: "${{ inputs.PYTHON_VERSION }}"
  # Could actually just use `toml` directly.
  - name: "Install Poetry"
    shell: bash
    env:
      POETRY_URL: "${{ inputs.POETRY_URL }}"
      POETRY_VERSION: "${{ inputs.POETRY_VERSION }}"
    run: |
      set -eu
      curl -Ss --fail --location "${POETRY_URL}" | python - --version "${POETRY_VERSION}"
      echo "$HOME/.local/bin" >> "$GITHUB_PATH"
  - name: "Gather image-related variables"
    shell: bash
    run: |
      set -Eeuo pipefail
      echo "PRJNAME=$(poetry version | cut -d" " -f1)" >> $GITHUB_ENV
      echo "IMAGE_VERSION_TAG=$(poetry version -s)" >> $GITHUB_ENV
      echo "CODE_ENV=production" >> $GITHUB_ENV

  # ### Docker ###
  - {name: "Set up QEMU for Docker", uses: docker/setup-qemu-action@v2}
  - {name: "Set up Docker Buildx", uses: docker/setup-buildx-action@v2}
  - name: "Login to DockerHub"
    uses: docker/login-action@v2
    with:
      username: "${{ env.DOCKERHUB_ORG_NAME }}"
      password: "${{ env.DOCKERHUB_TOKEN }}"
  - name: "Build image and push"
    id: build_image
    uses: docker/build-push-action@v3
    with:
      file: ./deploy/Dockerfile
      push: true
      context: .
      build-args: |
        CODE_ENV=${{ env.CODE_ENV }}
      tags: |
        investmentsteam/${{ env.PRJNAME }}:latest
        investmentsteam/${{ env.PRJNAME }}:${{ env.IMAGE_VERSION_TAG }}
