name: "common_protected_bump_action"

inputs:
  AUTOBUMP_URL:
    type: string

  # Which code paths to check for changes (space-separated).
  CODE_PATHS:
    type: string
    default: "./src/"
  RELEASE_TYPE:
    type: string
    default: "minor"
  EXPECTED_BRANCH:
    type: string
    default: "master"

  PYTHON_VERSION:
    type: string
    default: "3.10"
  POETRY_VERSION:
    type: string
    default: "1.2.1"
  POETRY_URL:
    type: string
    default: "https://install.python-poetry.org"

runs:
  using: "composite"
  steps:

  # ... but really, this should be in a base image or something ...
  - name: "Set up Python ${{ inputs.PYTHON_VERSION }}"
    id: setup-python
    uses: actions/setup-python@v4
    with:
      python-version: "${{ inputs.PYTHON_VERSION }}"
  - name: "Install Poetry"
    shell: bash
    run: |
      set -eu
      curl -sSL "${{ inputs.POETRY_URL }}" | python - --version "${{ inputs.POETRY_VERSION }}"
      echo "$HOME/.local/bin" >> "$GITHUB_PATH"

  - uses: actions/checkout@v3
    with:
      fetch-depth: 0  # all history
      submodules: recursive

  - name: "Release"
    shell: bash
    # Reminder: validate the complicated scripts in actions using
    #     cat .github/common_bump_protected/action.yaml | yq -r '.runs.steps[-1].run' | sed -r 's/\$\{\{[^\}]+\}\}/SOMEVALUE/g' | shellcheck --shell=bash -
    run: |
      set -Eeuo pipefail
      set -x

      branch="$(git branch --show-current)"
      if [ "$branch" != "${{ inputs.EXPECTED_BRANCH }}" ]; then
          echo "Unexpected branch='${branch}' != '${{ inputs.EXPECTED_BRANCH }}'" >&2
          exit 1
      fi

      # Check to ensure there's no infinite bump recursion.
      # Also makes it possible to avoid version bump on non-code changes.
      LAST_VER="$(poetry version --short)"
      changes="$(git diff --stat "refs/tags/v${LAST_VER}" ${{ inputs.CODE_PATHS }})"
      if [ -z "$changes" ]; then
          echo "No changes since 'v${LAST_VER}' in ${{ inputs.CODE_PATHS }}"
          exit 0
      fi

      repo="$(git remote get-url origin)"
      # These actions should already use the https URL,
      # but for copypasteability, normalize it:
      repo="$(printf "%s" "$repo" | sed -r 's|^git@github.com:|https://github.com/|')"
      # The code behind the API:
      # 1. checks that URL is `https://github.com/Private-Crypto-Trading-Fund/â€¦`,
      # 2. does `git clone` on it with a HTTP-basic-auth secret,
      # 3. `toml`-parses the `pyproject.toml`, updates it,
      # 4. git pushes.
      curl --fail -v -X POST "${{ inputs.AUTOBUMP_URL }}?release_type=${{ inputs.RELEASE_TYPE }}&url=${repo}"
